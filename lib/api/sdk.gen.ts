// This file is auto-generated by @hey-api/openapi-ts

import type { Options as ClientOptions, TDataShape, Client } from '@hey-api/client-axios';
import type { GetHealthHelloData, GetHealthHelloResponse, PostPostsByPostIdCommentsByParentCommentIdData, PostPostsByPostIdCommentsByParentCommentIdResponse, PostPostsByPostIdCommentsByParentCommentIdError, GetPostsByPostIdCommentsData, GetPostsByPostIdCommentsResponse, GetPostsByPostIdCommentsError, PostPostsByPostIdCommentsData, PostPostsByPostIdCommentsResponse, PostPostsByPostIdCommentsError, GetPostsByPostIdCommentsByCommentIdData, GetPostsByPostIdCommentsByCommentIdResponse, GetPostsByPostIdCommentsByCommentIdError, DeletePostsByIdReactData, DeletePostsByIdReactResponse, DeletePostsByIdReactError, PostPostsByIdReactData, PostPostsByIdReactResponse, PostPostsByIdReactError, DeletePostsByIdData, DeletePostsByIdResponse, DeletePostsByIdError, GetPostsByIdData, GetPostsByIdResponse, GetPostsByIdError, PutPostsByIdData, PutPostsByIdResponse, PutPostsByIdError, GetPostsData, GetPostsResponse, GetPostsError, PostPostsData, PostPostsResponse, PostPostsError, GetUserByIdData, GetUserByIdResponse, GetUserByIdError } from './types.gen';
import { client as _heyApiClient } from './client.gen';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = ClientOptions<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>;
};

export const getHealthHello = <ThrowOnError extends boolean = false>(options?: Options<GetHealthHelloData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetHealthHelloResponse, unknown, ThrowOnError>({
        responseType: 'text',
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/health/hello',
        ...options
    });
};

export const postPostsByPostIdCommentsByParentCommentId = <ThrowOnError extends boolean = false>(options: Options<PostPostsByPostIdCommentsByParentCommentIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostPostsByPostIdCommentsByParentCommentIdResponse, PostPostsByPostIdCommentsByParentCommentIdError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/posts/{postId}/comments/{parentCommentId}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const getPostsByPostIdComments = <ThrowOnError extends boolean = false>(options: Options<GetPostsByPostIdCommentsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetPostsByPostIdCommentsResponse, GetPostsByPostIdCommentsError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/posts/{postId}/comments',
        ...options
    });
};

export const postPostsByPostIdComments = <ThrowOnError extends boolean = false>(options: Options<PostPostsByPostIdCommentsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostPostsByPostIdCommentsResponse, PostPostsByPostIdCommentsError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/posts/{postId}/comments',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const getPostsByPostIdCommentsByCommentId = <ThrowOnError extends boolean = false>(options: Options<GetPostsByPostIdCommentsByCommentIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetPostsByPostIdCommentsByCommentIdResponse, GetPostsByPostIdCommentsByCommentIdError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/posts/{postId}/comments/{commentId}',
        ...options
    });
};

export const deletePostsByIdReact = <ThrowOnError extends boolean = false>(options: Options<DeletePostsByIdReactData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeletePostsByIdReactResponse, DeletePostsByIdReactError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/posts/{id}/react',
        ...options
    });
};

export const postPostsByIdReact = <ThrowOnError extends boolean = false>(options: Options<PostPostsByIdReactData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostPostsByIdReactResponse, PostPostsByIdReactError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/posts/{id}/react',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const deletePostsById = <ThrowOnError extends boolean = false>(options: Options<DeletePostsByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeletePostsByIdResponse, DeletePostsByIdError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/posts/{id}',
        ...options
    });
};

export const getPostsById = <ThrowOnError extends boolean = false>(options: Options<GetPostsByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetPostsByIdResponse, GetPostsByIdError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/posts/{id}',
        ...options
    });
};

export const putPostsById = <ThrowOnError extends boolean = false>(options: Options<PutPostsByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<PutPostsByIdResponse, PutPostsByIdError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/posts/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const getPosts = <ThrowOnError extends boolean = false>(options?: Options<GetPostsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetPostsResponse, GetPostsError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/posts',
        ...options
    });
};

export const postPosts = <ThrowOnError extends boolean = false>(options: Options<PostPostsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostPostsResponse, PostPostsError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/posts',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const getUserById = <ThrowOnError extends boolean = false>(options: Options<GetUserByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetUserByIdResponse, GetUserByIdError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/users/{id}',
        ...options
    });
};