// This file is auto-generated by @hey-api/openapi-ts

export type BackendCommonHelpersTypesInfiniteCursorPage1BackendFeaturesPostQueriesGetPostByIdResponse_Backend_Version_1000_Culture_neutral_PublicKeyToken_null = {
    items?: Array<BackendFeaturesPostQueriesGetPostByIdResponse> | null;
    nextCursor?: string | null;
    hasMore?: boolean;
};

export type BackendCommonHelpersTypesItemId = {
    id?: string;
};

export type BackendFeaturesCommentCommandsCommentContent = {
    content?: string | null;
};

export type BackendFeaturesCommentQueriesCommentDto = {
    commentId?: string;
    content?: string | null;
    user?: BackendFeaturesCommentQueriesCommentDtoUserDto;
    createdAt?: string;
    parentCommentId?: string | null;
    totalReplies?: number;
};

export type BackendFeaturesCommentQueriesCommentDtoUserDto = {
    userId?: string;
    oauthSub?: string | null;
    username?: string | null;
    email?: string | null;
    profilePicture?: string | null;
    bio?: string | null;
    createdAt?: string;
    lastLogin?: string | null;
    isActive?: boolean;
    verificationStatus?: string | null;
};

export type BackendFeaturesPostCommandsCreatePostCreatePostCommand = {
    content: string;
};

export type BackendFeaturesPostCommandsUpdatePostUpdatePostCommandUpdateContent = {
    content: string;
};

export type BackendFeaturesPostQueriesGetPostByIdResponse = {
    postId: string;
    content: string | null;
    user: BackendFeaturesPostQueriesGetPostByIdResponseUserDto;
    createdAt: string;
    updatedAt: string | null;
    reactions: BackendFeaturesPostQueriesGetPostByIdResponseReactionDto;
    reactionCount: number;
    commentCount: number;
};

export type BackendFeaturesPostQueriesGetPostByIdResponseReactionDto = {
    like: number;
    love: number;
    haha: number;
    wow: number;
    sad: number;
    angry: number;
    care: number;
};

export type BackendFeaturesPostQueriesGetPostByIdResponseUserDto = {
    userId: string;
    oauthSub: string | null;
    username: string | null;
    email: string | null;
    profilePicture: string | null;
    bio: string | null;
    createdAt: string;
    lastLogin: string | null;
    isActive: boolean;
    verificationStatus: string | null;
};

export type BackendFeaturesPostRoutesReactionTypeDto = {
    reactionType?: string | null;
};

export type BackendFeaturesUserQueriesGetUserByIdResponse = {
    id: number;
};

export type MediatRUnit = {
    [key: string]: never;
};

export type MicrosoftAspNetCoreMvcProblemDetails = {
    type?: string | null;
    title?: string | null;
    status?: number | null;
    detail?: string | null;
    instance?: string | null;
    [key: string]: unknown | (string | null) | (string | null) | (number | null) | (string | null) | (string | null) | undefined;
};

export type GetHealthHelloData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/health/hello';
};

export type GetHealthHelloResponses = {
    /**
     * OK
     */
    200: string;
};

export type GetHealthHelloResponse = GetHealthHelloResponses[keyof GetHealthHelloResponses];

export type PostPostsByPostIdCommentsByParentCommentIdData = {
    body: BackendFeaturesCommentCommandsCommentContent;
    path: {
        postId: string;
        parentCommentId: string;
    };
    query?: never;
    url: '/posts/{postId}/comments/{parentCommentId}';
};

export type PostPostsByPostIdCommentsByParentCommentIdErrors = {
    /**
     * Bad Request
     */
    400: MicrosoftAspNetCoreMvcProblemDetails;
    /**
     * Unauthorized
     */
    401: unknown;
    /**
     * Forbidden
     */
    403: unknown;
    /**
     * Not Found
     */
    404: MicrosoftAspNetCoreMvcProblemDetails;
};

export type PostPostsByPostIdCommentsByParentCommentIdError = PostPostsByPostIdCommentsByParentCommentIdErrors[keyof PostPostsByPostIdCommentsByParentCommentIdErrors];

export type PostPostsByPostIdCommentsByParentCommentIdResponses = {
    /**
     * Created
     */
    201: BackendCommonHelpersTypesItemId;
};

export type PostPostsByPostIdCommentsByParentCommentIdResponse = PostPostsByPostIdCommentsByParentCommentIdResponses[keyof PostPostsByPostIdCommentsByParentCommentIdResponses];

export type GetPostsByPostIdCommentsData = {
    body?: never;
    path: {
        postId: string;
    };
    query?: {
        cursor?: string;
        pageSize?: number;
    };
    url: '/posts/{postId}/comments';
};

export type GetPostsByPostIdCommentsErrors = {
    /**
     * Not Found
     */
    404: MicrosoftAspNetCoreMvcProblemDetails;
};

export type GetPostsByPostIdCommentsError = GetPostsByPostIdCommentsErrors[keyof GetPostsByPostIdCommentsErrors];

export type GetPostsByPostIdCommentsResponses = {
    /**
     * OK
     */
    200: BackendFeaturesCommentQueriesCommentDto;
};

export type GetPostsByPostIdCommentsResponse = GetPostsByPostIdCommentsResponses[keyof GetPostsByPostIdCommentsResponses];

export type PostPostsByPostIdCommentsData = {
    body: BackendFeaturesCommentCommandsCommentContent;
    path: {
        postId: string;
    };
    query?: never;
    url: '/posts/{postId}/comments';
};

export type PostPostsByPostIdCommentsErrors = {
    /**
     * Bad Request
     */
    400: MicrosoftAspNetCoreMvcProblemDetails;
    /**
     * Unauthorized
     */
    401: unknown;
    /**
     * Forbidden
     */
    403: unknown;
    /**
     * Not Found
     */
    404: MicrosoftAspNetCoreMvcProblemDetails;
};

export type PostPostsByPostIdCommentsError = PostPostsByPostIdCommentsErrors[keyof PostPostsByPostIdCommentsErrors];

export type PostPostsByPostIdCommentsResponses = {
    /**
     * Created
     */
    201: BackendCommonHelpersTypesItemId;
};

export type PostPostsByPostIdCommentsResponse = PostPostsByPostIdCommentsResponses[keyof PostPostsByPostIdCommentsResponses];

export type GetPostsByPostIdCommentsByCommentIdData = {
    body?: never;
    path: {
        postId: string;
        commentId: string;
    };
    query?: {
        cursor?: string;
        pageSize?: number;
    };
    url: '/posts/{postId}/comments/{commentId}';
};

export type GetPostsByPostIdCommentsByCommentIdErrors = {
    /**
     * Not Found
     */
    404: MicrosoftAspNetCoreMvcProblemDetails;
};

export type GetPostsByPostIdCommentsByCommentIdError = GetPostsByPostIdCommentsByCommentIdErrors[keyof GetPostsByPostIdCommentsByCommentIdErrors];

export type GetPostsByPostIdCommentsByCommentIdResponses = {
    /**
     * OK
     */
    200: BackendFeaturesCommentQueriesCommentDto;
};

export type GetPostsByPostIdCommentsByCommentIdResponse = GetPostsByPostIdCommentsByCommentIdResponses[keyof GetPostsByPostIdCommentsByCommentIdResponses];

export type DeletePostsByIdReactData = {
    body?: never;
    path: {
        id: string;
    };
    query?: never;
    url: '/posts/{id}/react';
};

export type DeletePostsByIdReactErrors = {
    /**
     * Not Found
     */
    404: MicrosoftAspNetCoreMvcProblemDetails;
};

export type DeletePostsByIdReactError = DeletePostsByIdReactErrors[keyof DeletePostsByIdReactErrors];

export type DeletePostsByIdReactResponses = {
    /**
     * No Content
     */
    204: MediatRUnit;
};

export type DeletePostsByIdReactResponse = DeletePostsByIdReactResponses[keyof DeletePostsByIdReactResponses];

export type PostPostsByIdReactData = {
    body: BackendFeaturesPostRoutesReactionTypeDto;
    path: {
        id: string;
    };
    query?: never;
    url: '/posts/{id}/react';
};

export type PostPostsByIdReactErrors = {
    /**
     * Bad Request
     */
    400: MicrosoftAspNetCoreMvcProblemDetails;
    /**
     * Not Found
     */
    404: MicrosoftAspNetCoreMvcProblemDetails;
};

export type PostPostsByIdReactError = PostPostsByIdReactErrors[keyof PostPostsByIdReactErrors];

export type PostPostsByIdReactResponses = {
    /**
     * No Content
     */
    204: MediatRUnit;
};

export type PostPostsByIdReactResponse = PostPostsByIdReactResponses[keyof PostPostsByIdReactResponses];

export type DeletePostsByIdData = {
    body?: never;
    path: {
        id: string;
    };
    query?: never;
    url: '/posts/{id}';
};

export type DeletePostsByIdErrors = {
    /**
     * Not Found
     */
    404: MicrosoftAspNetCoreMvcProblemDetails;
};

export type DeletePostsByIdError = DeletePostsByIdErrors[keyof DeletePostsByIdErrors];

export type DeletePostsByIdResponses = {
    /**
     * No Content
     */
    204: void;
};

export type DeletePostsByIdResponse = DeletePostsByIdResponses[keyof DeletePostsByIdResponses];

export type GetPostsByIdData = {
    body?: never;
    path: {
        id: string;
    };
    query?: never;
    url: '/posts/{id}';
};

export type GetPostsByIdErrors = {
    /**
     * Not Found
     */
    404: MicrosoftAspNetCoreMvcProblemDetails;
};

export type GetPostsByIdError = GetPostsByIdErrors[keyof GetPostsByIdErrors];

export type GetPostsByIdResponses = {
    /**
     * OK
     */
    200: BackendFeaturesPostQueriesGetPostByIdResponse;
};

export type GetPostsByIdResponse = GetPostsByIdResponses[keyof GetPostsByIdResponses];

export type PutPostsByIdData = {
    body: BackendFeaturesPostCommandsUpdatePostUpdatePostCommandUpdateContent;
    path: {
        id: string;
    };
    query?: never;
    url: '/posts/{id}';
};

export type PutPostsByIdErrors = {
    /**
     * Bad Request
     */
    400: MicrosoftAspNetCoreMvcProblemDetails;
    /**
     * Not Found
     */
    404: MicrosoftAspNetCoreMvcProblemDetails;
};

export type PutPostsByIdError = PutPostsByIdErrors[keyof PutPostsByIdErrors];

export type PutPostsByIdResponses = {
    /**
     * No Content
     */
    204: MediatRUnit;
};

export type PutPostsByIdResponse = PutPostsByIdResponses[keyof PutPostsByIdResponses];

export type GetPostsData = {
    body?: never;
    path?: never;
    query?: {
        cursor?: string;
        pageSize?: number;
    };
    url: '/posts';
};

export type GetPostsErrors = {
    /**
     * Bad Request
     */
    400: MicrosoftAspNetCoreMvcProblemDetails;
};

export type GetPostsError = GetPostsErrors[keyof GetPostsErrors];

export type GetPostsResponses = {
    /**
     * OK
     */
    200: BackendCommonHelpersTypesInfiniteCursorPage1BackendFeaturesPostQueriesGetPostByIdResponse_Backend_Version_1000_Culture_neutral_PublicKeyToken_null;
};

export type GetPostsResponse = GetPostsResponses[keyof GetPostsResponses];

export type PostPostsData = {
    body: BackendFeaturesPostCommandsCreatePostCreatePostCommand;
    path?: never;
    query?: never;
    url: '/posts';
};

export type PostPostsErrors = {
    /**
     * Bad Request
     */
    400: MicrosoftAspNetCoreMvcProblemDetails;
    /**
     * Unauthorized
     */
    401: unknown;
    /**
     * Forbidden
     */
    403: unknown;
};

export type PostPostsError = PostPostsErrors[keyof PostPostsErrors];

export type PostPostsResponses = {
    /**
     * Created
     */
    201: BackendCommonHelpersTypesItemId;
};

export type PostPostsResponse = PostPostsResponses[keyof PostPostsResponses];

export type GetUserByIdData = {
    body?: never;
    path: {
        id: number;
    };
    query?: never;
    url: '/users/{id}';
};

export type GetUserByIdErrors = {
    /**
     * Unauthorized
     */
    401: unknown;
    /**
     * Forbidden
     */
    403: unknown;
    /**
     * Not Found
     */
    404: MicrosoftAspNetCoreMvcProblemDetails;
};

export type GetUserByIdError = GetUserByIdErrors[keyof GetUserByIdErrors];

export type GetUserByIdResponses = {
    /**
     * OK
     */
    200: BackendFeaturesUserQueriesGetUserByIdResponse;
};

export type GetUserByIdResponse = GetUserByIdResponses[keyof GetUserByIdResponses];

export type ClientOptions = {
    baseURL: `${string}://openapi-schema.json` | (string & {});
};